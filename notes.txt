5 Core Concepts in Spring Security
-Authentication
-Principal
-Roles
-Authorization
-Granted Authorities

Authentication & Authorization:
Authentication is answereing "Who are You?" -- UserName and Password
Authorization is "What do You Want?"
Knowledge Based Authentication is Simple and very Effective but with greater risk
Possesion based Authentication
Multi-factor Authentication

Authorization s examining what you want and checking if u can have/do what you are requesting for.

Users are authenticated first before authorization

Principal:
This is the person you have identified through the Identification process, it is the currently logged in user/account.

How does Authorization Happen? Only through Granted Authorities
Granted Authorities:
This are roles granted to a User, configured to do some specific action.

Roles: This are Group of Authorities that are usually assigned together
They allow Granted Authorities be given to users profiled in that particular role. It makes creation and profiling easy.

In some cases Authorities are somehow mistaken for Roles and can be subbed for each other, But in Spring Boot the ffg holds true

Fine grain Permissions = Authorities
More Coarse Group Based Permissions = Roles


SpringBoot works with Filters associated with Servlets Technolgy, they intercepts requests from users(cross cutting)  Filters can be applied to all possible URL.

Spring Boot adds Mandatory Authentication fro all URL, except error page ("/error")
It adds a login form
Handles Login Error and shows a login message
Creates a user and sets a default password

Authentication manager is the mechanism  that does authentication in Spring Boot, it uses the authenticate() method for Authentication
We can get hold of it and configure it for our own build by doing the following:
--Get Hold of the AuthenticationManagerBuilder 
--Set the Configuration on it

How do u get hold of the AuthenticationManagerBuilder?
First: There's a class sitting on the Spring Security App(WebSecurityConfigurerAdapter), extend that class
Second: Override the configure(AuthenticationManagerBuilder authBuild) method there

N.B: Always deal with Hashed Password

HttpSecurity:
This helps you to configure what are the parts and what the access level of those path is.
We use HttpSecurity in SpringBoot for Authorization purposes.

WebSecurityConfigurerAdapter:
This class is used in  Spring Boot fo both Authentication and Authorization requests

Authentication Filter: 
Works with using input and Output parameters.
When Authentiaction is done it not only returns true or false, it also returns information about the Principal

Providers: Are responsible for doing the actual authentiaction process
AuthenticationProvider: This interface houses the method authenticate()

With this an application can have several Authentiaction Provider implemenatation class, to manage all this Providers an AuthenticationManager is used as it co-ordinates with all the available Providers, it delegates the authentication based on the authentication process the user chooses. Now the manager can only do this when the available provider sends all that they support.

In order for the Authentication to be done, the authenticationProviders makes use of the UserDetailsService(loadByUserName()) Interface

When all this is done and successful, the Authentication Filter stores the Principal on a ThreadLocal--this helps against future need to know at every instance the particular user logged in.

A Filter stores the Verified user and stores in the current session so that you do not have to  

























